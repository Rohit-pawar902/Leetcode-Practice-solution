//Solved using Greedy method.
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

O(N)  SOLUTION
class Solution{//greedy approach is used here solve this que in O(n) complexity
                            //do what's the best for present doesn't keep care about the future.
    public int jump(int nums[]){
        int curMax=0;//which keeps track of maximum possible index that can be reached
        int curJump=0;//curJump the max posiible jump you can make from i
                      //and when the i reach the curJump means its now time to take jump or increase the jump variable. 
        int jump=0;
            for(int i=0;i<nums.length-1;i++){
                if(i+nums[i]>curMax){
                    curMax=i+nums[i];
                }
                
                if(curJump==i){
                    jump++;
                    curJump=curMax;
                }
            }
    
    return jump;
    }
}

==>O(N2) approach using dp
public class Solution{
    public int jump(int[] nums) {
        // Integer n[]=Integer.valueOf(nums);
        int dp[]=new int[nums.length+1];
         
         Arrays.fill(dp,-1);
         
         return jim(nums,0,dp);
        }

    public int jim(int nums[],int i,int dp[]){
        if(i==nums.length-1){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        int temp=Integer.MAX_VALUE/2;
        for(int j=1;j<=nums[i];j++){
            if(i+j>nums.length-1)continue;
            temp=Math.min(temp,1+jim(nums,i+j,dp));
        }
        return dp[i]=temp;
    }
    
    
}



