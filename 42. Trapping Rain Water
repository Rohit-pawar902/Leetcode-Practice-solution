42. Trapping Rain Water
Hard
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

// class Solution { //Brute Force
//     public int trap(int[] a) {
//         int ans=0;
//         for(int i=0;i<a.length;i++){
//             int Lmax=a[i];
//             int Rmax=a[i];
//             for(int j=0;j<a.length;j++){
//                 if(i==j)continue;
//                 if(j<i){
//                    Lmax=Math.max(Lmax,a[j]); 
//                 }
//                 else{
//                   Rmax=Math.max(Rmax,a[j]);  
//                 }
//             }
//            ans+= Math.min(Lmax,Rmax)-a[i];
//         }
//         return ans;
//     }
// }
// class Solution { //O(n) O(n)time and space
//     public int trap(int[] a) {
//         if(a.length==0) return 0;
//         int ans=0;
//         int pre[]=new int[a.length];
//         int suf[]=new int[a.length];
//         pre[0]=a[0];
//         suf[a.length-1]=a[a.length-1];
//         for(int i=1;i<a.length;i++){
//             pre[i]=Math.max(pre[i-1],a[i]);
//         }
//         for(int i=a.length-2;i>=0;i--){
//             suf[i]=Math.max(suf[i+1],a[i]);
//         }
//         for(int i=0;i<a.length;i++){
//            ans+= Math.min(pre[i],suf[i])-a[i];
//         }
//         return ans;
//     }
// }
class Solution { //O(n) O(n)time and space
    public int trap(int[] a) {
        int l=0,r=a.length-1;
        int Lmax=0,Rmax=0;
        int ans=0;
        while(l<r){
            if(a[l]<=a[r]){
                if(a[l]>=Lmax)
                    Lmax=a[l];
                else{
                   ans+=Lmax-a[l];   
                }
                l++;
            }
            else{
                if(a[r]>=Rmax)
                    Rmax=a[r];
                else{
                   ans+=Rmax-a[r];   
                }
                r--;
            }
        }
        return ans;
    }
}

