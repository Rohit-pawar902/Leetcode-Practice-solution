/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
     if(node==null)
         return null;
        
        HashMap<Node,Node> hm = 
                        new HashMap<Node,Node>();
        Queue<Node> q=new LinkedList<>();
        q.offer(node);
        Node s=new Node(node.val);
        hm.put(node,s);
      
        while(!q.isEmpty()){
            Node temp=q.peek();
            Node p=hm.get(temp);
            q.poll();
            for(Node t:temp.neighbors){
                if(!hm.containsKey(t)){
                    Node newNode=new Node(t.val);
                   
                    p.neighbors.add(newNode);
                    
                    hm.put(t,newNode);
                    q.offer(t);
                }
                else{
                   p.neighbors.add(hm.get(t));}
            }
        }
        return hm.get(node);
    }
}
