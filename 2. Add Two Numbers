2. Add Two Numbers
Medium

10542

2576

Add to List

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          ListNode carry=new ListNode();
        ListNode ans=new ListNode();
        ListNode ans1=ans;
        while(l1!=null||l2!=null){
            ListNode list2= l1!=null?l1:new ListNode();
            ListNode list3= l2!=null?l2:new ListNode();
            int a=list2.val+list3.val+carry.val;
                  if(a>9){
                      carry.val=a/10;
                      ans.next=new ListNode(a%10);
                  }
                  else{
                      carry.val=0;
                      ans.next=new ListNode(a);
                  }
            if(l1!=null){
            l1=l1.next;}
            if(l2!=null){
            l2=l2.next;}
            ans=ans.next;
        }
        if(carry.val!=0){
                ans.next=carry;
        }
        return ans1.next;
    }
}
